import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import Algorithms.*;


public class Compute {

	public static Info info = new Info();
	public static boolean controlRead=true;
	public static boolean controlCompute=true;

	private static class ThreadRead extends Thread {
		public FileManager reader;
		public List<File> files;

		public ThreadRead(List<File> files, FileManager reader){
			super();
			this.reader=reader;
			this.files=files;
		}

		public void run() {
			while(controlRead) {
				try {
					read();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		public void read() throws InterruptedException{
			synchronized(info){
				for (File file: files){
					reader.parse(file, info);
					while(info.getSizeDeque()>10){
						info.wait();
						info.notify();
					}
				}
				controlRead=false;
			}

		}
	}

	private static class ThreadCompute extends Thread {
		String key;


		public ThreadCompute(String key){
			super();
			this.key=key;
		}

		public void run() {
			while(controlCompute) {
				try {
					compute();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		public void compute() throws InterruptedException{
			synchronized(info){
				Density density = new Density();
				DescriptiveStats ds = new DescriptiveStats(info.getInfo().get(key));
				density.densityX(info.getInfo().get(key),ds.getMean(), info.getInfo().get(key).getLast());
				if(density.getDensities().size()>10){
					System.out.println("Yo os maldigo");
					density.getDensities().removeLast();
				}
				info.getInfo().get(key).removeFirst();
				if(controlRead){
					info.notify();
					info.wait();
				}
				if(info.isEmptyDeque()){
					controlCompute=false;
				}
			}
		}
	}

	public static void main (String[] args) throws InterruptedException{
		double time_start = System.currentTimeMillis();
		FileManager fm = new FileManager();
		String rootDirectory = "/Users/alvaro/Documents/TUGraz/Master Thesis/TrainingSet/";
		List<File> files = fm.listDirectories(rootDirectory);
		for (File file: files){

		}
		ThreadRead threadRead = new ThreadRead(files, fm);
		threadRead.start();
		System.out.println("putita");

		for(String key: info.getInfo().keySet()){
			System.out.println("putita");

			ThreadCompute tc= new ThreadCompute(key);
			tc.start();
			System.out.println("putita");
		}
		threadRead.join();
		double time_end = System.currentTimeMillis();
		System.out.println("the task has taken "+ ( time_end - time_start ) +" milliseconds");
	}
} 

