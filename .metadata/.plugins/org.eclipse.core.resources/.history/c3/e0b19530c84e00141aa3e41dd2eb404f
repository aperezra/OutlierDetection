package Algorithms;


import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;


/**
 * The Class Algorithms. 
 *
 * @author Alvaro Perez Ramon
 */
public class Knn implements Algorithm{

	/** The distances. */
	public Deque<Integer> distances;

	/**
	 * Instantiates a new algorithms.
	 */
	public Knn() {
		super();
		this.distances = new ArrayDeque<Integer>();

	}

	/**
	 * Gets the distances.
	 *
	 * @return the distances
	 */
	public Deque<Integer> getDistances() {
		return distances;
	}

	/**
	 * Sets the distances.
	 *
	 * @param distances the new distances
	 */
	public void setDistances(Deque<Integer> distances) {
		this.distances = distances;
	}

	public int getSize(){
		return distances.size();
	}
	/**
	 * Distance.
	 *
	 * @param reference the reference
	 * @param val the val
	 * @return the int
	 */
	public int distance(int reference, int val) {
		int distance = Math.abs(val-reference);
		return distance;
	}
	

	public double probOutlier() {
		DescriptiveStats ds = new DescriptiveStats(distances);
		double mean = ds.getMean();
		double sigma = ds.getStandardDev(mean);
		if(distances.getLast()>mean){
			return distances.getLast()/(mean+sigma);
		}
		if(distances.getLast()<mean){
			return distances.getLast()/(mean-sigma);
		}
		return 0;
	}
	

	/**
	 * Calculates the distance from X to all the other points in the list.
	 * And stores in a Deque the mean value of the distances to all the other points.
	 * @param data the data
	 */
	public void calculate(Deque<Integer> data){
		//List<Integer> list = new ArrayList(data);
		//Calcular cada vez la distancia de cada punto a todos los puntos de la lista y luego comprobar que el último punto que hemos añadido si su distancia
		//es mayor que la de los otros puntos para saber si es outlier!!
		List<Integer> dist = new ArrayList<Integer>();
		for(int i: data){
			for(int j:data){
				if(i!=j){
					dist.add(distance(i,j));;	
				}
			}
		}
		DescriptiveStats stats = new DescriptiveStats(dist);
		int meanVal=stats.getMean();
		if(distances.isEmpty()){
			distances.offerFirst(meanVal);
		}
		else{
			distances.offerLast(meanVal);
		}
	}

	@Override
	public void deleteFirst() {
		distances.removeFirst();
	}

	@Override
	public String toString(){
		return this.distances.toString();	
	}
}
