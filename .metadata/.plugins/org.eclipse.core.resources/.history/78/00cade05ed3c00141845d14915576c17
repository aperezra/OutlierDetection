
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

// TODO: Auto-generated Javadoc
/**
 * The Class Algorithms. 
 *
 * @author Alvaro Perez Ramon
 */
public class Algorithms {

	/** The value. */
	public int value;

	/**
	 * Instantiates a new algorithms.
	 */
	public Algorithms() {
		super();
	}
	/**
	 * Instantiates a new algorithms.
	 *
	 * @param value the value
	 */
	public Algorithms(int value) {
		super();
		this.value = value;
	}

	/**
	 * Gets the value.
	 *
	 * @return the value
	 */
	public int getValue() {
		return value;
	}

	/**
	 * Sets the value.
	 *
	 * @param value the new value
	 */
	public void setValue(int value) {
		this.value = value;
	}

	/**
	 * Distance.
	 *
	 * @param neighbour the neighbour
	 * @return the int
	 */
	private int distance(int reference, int val){
		int distance = Math.abs(val-reference);
		//System.out.println("El vecino es: " + neighbour + " el valor es: " + value +" = "+distance);
		return distance;
	}

	/**
	 * Calculates the distance from a point to all the other points in the list.
	 *
	 * @param data the data
	 */
	public void knn(List<Integer> data){
		System.out.print("Calculo respecto a " + this.value + ":");
		for(int val: data){
			int distance = distance(val, this.value);		
		}
		System.out.println();
	}
	
	/**
	 * Calculates the distance from a point to the k previous points.
	 *
	 * @param data the data
	 * @param k the number of neighbors to calculate
	 */
	public void knn(List<Integer> data, int k){
		for(int i=(data.size()-k-1); i<(data.size()-1); i++){
			int distance = distance(data.get(i),this.value);			
		}
	}
	
	/**
	 * Hull. Sort the list from lower to higher value so its possible to show the outermost layers.
	 *
	 * @param data the list with the visits
	 * @return the sorted list from lower to higher value
	 */
	public List<Integer> hull(List<Integer> data){
		List<Integer> hull = new ArrayList<Integer>(data);

		Collections.sort(hull);
		return hull;
	}

	
	/**
	 * Density.
	 *
	 * @param data the data
	 * @param p reference point to which is calculated the density
	 * @param x the point to which we are calculating the density
	 */
	public double densityX(List<Integer> data, int p, int x){
		double density = 0;
		double sum = 0;
		for(int i=0; i<data.size()-1;i++){
			sum+= Math.abs(distance(data.get(i),p) - distance(x,p));
		}
		if(sum!=0){
		density=data.size()/sum;
		return density;
		}
		return 0;
	}
	
}
